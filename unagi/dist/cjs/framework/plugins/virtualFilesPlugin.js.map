{
  "version": 3,
  "sources": ["../../../../src/framework/plugins/virtualFilesPlugin.ts"],
  "sourcesContent": ["import { promises as fs } from 'fs'\nimport path from 'path'\n\nimport { Plugin, ResolvedConfig, ViteDevServer, normalizePath } from 'vite'\n\nimport type { UnagiVitePluginOptions } from '../types.js'\nimport { viteception } from '../viteception.js'\n\nexport const UNAGI_DEFAULT_SERVER_ENTRY = process.env.UNAGI_SERVER_ENTRY || '/src/App.server'\n\n// The character \":\" breaks Vite with Node >= 16.15. Use \"_\" instead\nconst VIRTUAL_PREFIX = 'virtual__'\nconst PROXY_PREFIX = 'proxy__'\n\nconst ERROR_FILE = 'error.jsx'\nconst VIRTUAL_ERROR_FILE = VIRTUAL_PREFIX + ERROR_FILE\n\nconst UNAGI_CONFIG_ID = 'unagi.config.ts'\nconst VIRTUAL_UNAGI_CONFIG_ID = VIRTUAL_PREFIX + UNAGI_CONFIG_ID\nexport const VIRTUAL_PROXY_UNAGI_CONFIG_ID = VIRTUAL_PREFIX + PROXY_PREFIX + UNAGI_CONFIG_ID\n\nconst UNAGI_ROUTES_ID = 'unagi-routes.server.jsx'\nconst VIRTUAL_UNAGI_ROUTES_ID = VIRTUAL_PREFIX + UNAGI_ROUTES_ID\nexport const VIRTUAL_PROXY_UNAGI_ROUTES_ID = VIRTUAL_PREFIX + PROXY_PREFIX + UNAGI_ROUTES_ID\n\nexport default (pluginOptions: UnagiVitePluginOptions) => {\n  let config: ResolvedConfig\n  let server: ViteDevServer\n\n  return {\n    name: 'unagi:virtual-files',\n    configResolved(_config) {\n      config = _config\n    },\n    configureServer(_server) {\n      server = _server\n    },\n    resolveId(source, importer) {\n      console.log('virtual files', source, importer)\n      if (source === VIRTUAL_UNAGI_CONFIG_ID) {\n        return findUnagiConfigPath(config.root, pluginOptions.configPath).then((hcPath: string) =>\n          // This direct dependency on a real file\n          // makes HMR work for the virtual module.\n          this.resolve(hcPath, importer, { skipSelf: true })\n        )\n      }\n\n      if (\n        [\n          VIRTUAL_PROXY_UNAGI_CONFIG_ID,\n          VIRTUAL_PROXY_UNAGI_ROUTES_ID,\n          VIRTUAL_UNAGI_ROUTES_ID,\n          VIRTUAL_ERROR_FILE,\n        ].includes(source)\n      ) {\n        // Virtual modules convention\n        // https://vitejs.dev/guide/api-plugin.html#virtual-modules-convention\n\n        return '\\0' + source\n      }\n    },\n    load(id) {\n      // Likely due to a bug in Vite, but virtual modules cannot be loaded\n      // directly using ssrLoadModule from a Vite plugin. It needs to be proxied as follows:\n      if (id === '\\0' + VIRTUAL_PROXY_UNAGI_CONFIG_ID) {\n        return `import hc from '${VIRTUAL_UNAGI_CONFIG_ID}'; export default hc;`\n      }\n      if (id === '\\0' + VIRTUAL_PROXY_UNAGI_ROUTES_ID) {\n        return `import hr from '${VIRTUAL_UNAGI_ROUTES_ID}'; export default hr;`\n      }\n\n      if (id === '\\0' + VIRTUAL_UNAGI_ROUTES_ID) {\n        return importUnagiConfig().then((hc) => {\n          let routesPath: string =\n            (typeof hc.routes === 'string' ? hc.routes : hc.routes?.files) ?? '/src/routes'\n\n          if (routesPath.startsWith('./')) {\n            routesPath = routesPath.slice(1)\n          }\n\n          if (!routesPath.includes('*')) {\n            if (!routesPath.endsWith('/')) {\n              routesPath += '/'\n            }\n\n            routesPath += '**/*.server.[jt](s|sx)'\n          }\n\n          const [dirPrefix] = routesPath.split('/*')\n\n          let code = `export default {\\n  dirPrefix: '${dirPrefix}',\\n  basePath: '${\n            hc.routes?.basePath ?? ''\n          }',\\n  files: import.meta.globEager('${routesPath}')\\n};`\n\n          if (config.command === 'serve') {\n            // Add dependency on Unagi config for HMR\n            code += `\\nimport '${VIRTUAL_UNAGI_CONFIG_ID}';`\n          }\n\n          return { code }\n        })\n      }\n\n      if (id === '\\0' + VIRTUAL_ERROR_FILE) {\n        return importUnagiConfig().then((hc) => {\n          const errorPath = hc.serverErrorPage ?? '/src/Error.{jsx,tsx}'\n          const code = `const errorPage = import.meta.glob(\"${errorPath}\");\\n export default Object.values(errorPage)[0];`\n          return { code }\n        })\n      }\n    },\n  } as Plugin\n\n  async function importUnagiConfig() {\n    if (server) {\n      const loaded = await server.ssrLoadModule(VIRTUAL_PROXY_UNAGI_CONFIG_ID)\n\n      return loaded.default\n    }\n\n    const { loaded } = await viteception([VIRTUAL_PROXY_UNAGI_CONFIG_ID])\n    return loaded[0].default\n  }\n}\n\nasync function findUnagiConfigPath(root: string, userProvidedPath?: string) {\n  console.log('find', root, userProvidedPath)\n  let configPath = userProvidedPath\n\n  if (!configPath) {\n    // Find the config file in the project root\n    const files = await fs.readdir(root)\n    configPath = files.find((file) => /^unagi\\.config\\.[jt]s$/.test(file))\n  }\n\n  console.log('configPath', configPath)\n\n  if (configPath) {\n    configPath = normalizePath(configPath)\n\n    if (!configPath.startsWith('/')) configPath = path.resolve(root, configPath)\n  }\n\n  console.log('configPath', configPath)\n\n  return configPath || require.resolve('@tamagui/unagi/utilities/empty-unagi-config')\n}\n"],
  "mappings": "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",
  "names": []
}
