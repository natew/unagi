{
  "version": 3,
  "sources": ["../../../../src/core/FileRoutes/FileRoutes.server.tsx"],
  "sourcesContent": ["import React, {useMemo} from 'react';\nimport {matchPath} from '../../utilities/matchPath.js';\nimport {log} from '../../utilities/log/index.js';\nimport {extractPathFromRoutesKey} from '../../utilities/apiRoutes.js';\nimport {useServerRequest} from '../ServerRequestProvider/index.js';\n\nimport type {ImportGlobEagerOutput} from '../../types.js';\nimport {RouteParamsProvider} from '../useRouteParams/RouteParamsProvider.client.js';\n\ninterface FileRoutesProps {\n  /** The routes defined by Vite's [import.meta.globEager](https://vitejs.dev/guide/features.html#glob-import) method. */\n  routes?: ImportGlobEagerOutput;\n  /** A path that's prepended to all file routes. You can modify `basePath` if you want to prefix all file routes. For example, you can prefix all file routes with a locale. */\n  basePath?: string;\n  /** The portion of the file route path that shouldn't be a part of the URL. You need to modify this if you want to import routes from a location other than the default `src/routes`. */\n  dirPrefix?: string | RegExp;\n}\n\n/**\n * The `FileRoutes` component builds a set of default Hydrogen routes based on the output provided by Vite's\n * [import.meta.globEager](https://vitejs.dev/guide/features.html#glob-import) method. You can have multiple\n * instances of this component to source file routes from multiple locations.\n */\nexport function FileRoutes({routes, basePath, dirPrefix}: FileRoutesProps) {\n  const request = useServerRequest();\n  const {routeRendered, serverProps} = request.ctx.router;\n\n  if (routeRendered) return null;\n\n  if (!routes) {\n    const fileRoutes = request.ctx.hydrogenConfig!.routes;\n    routes = fileRoutes.files;\n    dirPrefix ??= fileRoutes.dirPrefix;\n    basePath ??= fileRoutes.basePath;\n  }\n\n  basePath ??= '/';\n\n  const pageRoutes = useMemo(\n    () => createPageRoutes(routes!, basePath, dirPrefix),\n    [routes, basePath, dirPrefix]\n  );\n\n  let foundRoute, foundRouteDetails;\n\n  for (let i = 0; i < pageRoutes.length; i++) {\n    foundRouteDetails = matchPath(serverProps.pathname, pageRoutes[i]);\n\n    if (foundRouteDetails) {\n      foundRoute = pageRoutes[i];\n      break;\n    }\n  }\n\n  if (foundRoute) {\n    request.ctx.router.routeRendered = true;\n    request.ctx.router.routeParams = foundRouteDetails.params;\n    return (\n      <RouteParamsProvider\n        routeParams={foundRouteDetails.params}\n        basePath={basePath}\n      >\n        <foundRoute.component\n          params={foundRouteDetails.params}\n          {...serverProps}\n        />\n      </RouteParamsProvider>\n    );\n  }\n\n  return null;\n}\n\ninterface HydrogenRoute {\n  component: any;\n  path: string;\n  exact: boolean;\n}\n\nexport function createPageRoutes(\n  pages: ImportGlobEagerOutput,\n  topLevelPath = '*',\n  dirPrefix: string | RegExp = ''\n): HydrogenRoute[] {\n  const topLevelPrefix = topLevelPath.replace('*', '').replace(/\\/$/, '');\n\n  const keys = Object.keys(pages);\n\n  const routes = keys\n    .map((key) => {\n      const path = extractPathFromRoutesKey(key, dirPrefix);\n\n      /**\n       * Catch-all routes [...handle].jsx don't need an exact match\n       * https://reactrouter.com/core/api/Route/exact-bool\n       */\n      const exact = !/\\[(?:[.]{3})(\\w+?)\\]/.test(key);\n\n      if (!pages[key].default && !pages[key].api) {\n        log?.warn(\n          `${key} doesn't export a default React component or an API function`\n        );\n      }\n\n      return {\n        path: topLevelPrefix + path,\n        component: pages[key].default,\n        exact,\n      };\n    })\n    .filter((route) => route.component);\n\n  /**\n   * Place static paths BEFORE dynamic paths to grant priority.\n   */\n  return [\n    ...routes.filter((route) => !route.path.includes(':')),\n    ...routes.filter((route) => route.path.includes(':')),\n  ];\n}\n"],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AAGA;AAgBO,oBAAoB,EAAC,QAAQ,UAAU,aAA6B;AACzE,QAAM,UAAU,iBAAiB;AACjC,QAAM,EAAC,eAAe,gBAAe,QAAQ,IAAI;AAEjD,MAAI;AAAe,WAAO;AAE1B,MAAI,CAAC,QAAQ;AACX,UAAM,aAAa,QAAQ,IAAI,eAAgB;AAC/C,aAAS,WAAW;AACpB,kBAAc,WAAW;AACzB,iBAAa,WAAW;AAAA,EAC1B;AAEA,eAAa;AAEb,QAAM,aAAa,QACjB,MAAM,iBAAiB,QAAS,UAAU,SAAS,GACnD,CAAC,QAAQ,UAAU,SAAS,CAC9B;AAEA,MAAI,YAAY;AAEhB,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC1C,wBAAoB,UAAU,YAAY,UAAU,WAAW,EAAE;AAEjE,QAAI,mBAAmB;AACrB,mBAAa,WAAW;AACxB;AAAA,IACF;AAAA,EACF;AAEA,MAAI,YAAY;AACd,YAAQ,IAAI,OAAO,gBAAgB;AACnC,YAAQ,IAAI,OAAO,cAAc,kBAAkB;AACnD,WACE,oCAAC;AAAA,MACC,aAAa,kBAAkB;AAAA,MAC/B;AAAA,OAEA,oCAAC,WAAW,WAAX;AAAA,MACC,QAAQ,kBAAkB;AAAA,MACzB,GAAG;AAAA,KACN,CACF;AAAA,EAEJ;AAEA,SAAO;AACT;AAQO,0BACL,OACA,eAAe,KACf,YAA6B,IACZ;AACjB,QAAM,iBAAiB,aAAa,QAAQ,KAAK,EAAE,EAAE,QAAQ,OAAO,EAAE;AAEtE,QAAM,OAAO,OAAO,KAAK,KAAK;AAE9B,QAAM,SAAS,KACZ,IAAI,CAAC,QAAQ;AAzFlB;AA0FM,UAAM,OAAO,yBAAyB,KAAK,SAAS;AAMpD,UAAM,QAAQ,CAAC,uBAAuB,KAAK,GAAG;AAE9C,QAAI,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,KAAK,KAAK;AAC1C,uCAAK,KACH,GAAG;AAAA,IAEP;AAEA,WAAO;AAAA,MACL,MAAM,iBAAiB;AAAA,MACvB,WAAW,MAAM,KAAK;AAAA,MACtB;AAAA,IACF;AAAA,EACF,CAAC,EACA,OAAO,CAAC,UAAU,MAAM,SAAS;AAKpC,SAAO;AAAA,IACL,GAAG,OAAO,OAAO,CAAC,UAAU,CAAC,MAAM,KAAK,SAAS,GAAG,CAAC;AAAA,IACrD,GAAG,OAAO,OAAO,CAAC,UAAU,MAAM,KAAK,SAAS,GAAG,CAAC;AAAA,EACtD;AACF;",
  "names": []
}
