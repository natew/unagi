{
  "version": 3,
  "sources": ["../../../../../src/utilities/log/__tests__/log-query-timeline.vitest.ts"],
  "sourcesContent": ["import { stripColors } from 'kolorist'\nimport { Mocked, vi } from 'vitest'\n\nimport { UnagiRequest } from '../../../foundation/UnagiRequest/UnagiRequest.server.js'\nimport { Logger, setLogger } from '../index.js'\nimport { collectQueryTimings, logQueryTimings } from '../log-query-timeline.js'\n\nlet mockedLogger: Mocked<Logger>\n\nconst QUERY_1 = 'test1'\nconst QUERY_2 = 'testing2'\n\nconst time = 1640995200000\n\ndescribe('cache header log', () => {\n  beforeEach(() => {\n    mockedLogger = {\n      trace: vi.fn(),\n      debug: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n      fatal: vi.fn(),\n      options: vi.fn(() => ({})),\n    }\n\n    vi.spyOn(performance, 'now').mockImplementation(() => time)\n\n    setLogger({ ...mockedLogger, showQueryTiming: true })\n  })\n\n  afterEach(() => {\n    setLogger(undefined)\n  })\n\n  it('should log query timing', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryTimings: [],\n      },\n      time: 1640995200200,\n      previouslyLoadedRequest: () => false,\n    } as unknown as UnagiRequest\n    collectQueryTimings(request, QUERY_1, 'requested')\n    collectQueryTimings(request, QUERY_1, 'resolved', 100)\n    collectQueryTimings(request, QUERY_1, 'rendered')\n\n    logQueryTimings('ssr', request)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(`\n      \"\u250C\u2500\u2500 Query timings for http://localhost:3000/\n      \u2502 -200.00ms  Requested  test1\n      \u2502 -200.00ms  Resolved   test1 (Took 100.00ms)\n      \u2502 -200.00ms  Rendered   test1\n      \u2514\u2500\u2500\"\n    `)\n  })\n\n  it('should detect suspense waterfall', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryTimings: [],\n      },\n      time: 1640995200200,\n      previouslyLoadedRequest: () => true,\n    } as unknown as UnagiRequest\n    collectQueryTimings(request, QUERY_1, 'requested')\n    collectQueryTimings(request, QUERY_1, 'resolved', 100)\n    collectQueryTimings(request, QUERY_1, 'requested')\n    collectQueryTimings(request, QUERY_1, 'rendered')\n    collectQueryTimings(request, QUERY_2, 'requested')\n    collectQueryTimings(request, QUERY_2, 'resolved', 100)\n    collectQueryTimings(request, QUERY_2, 'requested')\n    collectQueryTimings(request, QUERY_2, 'rendered')\n\n    logQueryTimings('ssr', request)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(`\n      \"\u250C\u2500\u2500 Query timings for http://localhost:3000/\n      \u2502 -200.00ms  Requested  test1\n      \u2502 -200.00ms  Resolved   test1 (Took 100.00ms)\n      \u2502 -200.00ms  Requested  test1\n      \u2502 -200.00ms  Rendered   test1\n      \u2502 Suspense waterfall detected\n      \u2502 -200.00ms  Requested  testing2\n      \u2502 -200.00ms  Resolved   testing2 (Took 100.00ms)\n      \u2502 -200.00ms  Requested  testing2\n      \u2502 -200.00ms  Rendered   testing2\n      \u2514\u2500\u2500\"\n    `)\n  })\n\n  it('should detect unused query', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryTimings: [],\n      },\n      previouslyLoadedRequest: () => false,\n      time: 1640995200200,\n    } as unknown as UnagiRequest\n    collectQueryTimings(request, QUERY_1, 'requested')\n    collectQueryTimings(request, QUERY_1, 'resolved', 100)\n\n    logQueryTimings('ssr', request)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(`\n      \"\u250C\u2500\u2500 Query timings for http://localhost:3000/\n      \u2502 -200.00ms  Requested  test1\n      \u2502 -200.00ms  Resolved   test1 (Took 100.00ms)\n      \u2502 Unused query detected: test1\n      \u2514\u2500\u2500\"\n    `)\n  })\n\n  it('should detect multiple data load', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryTimings: [],\n      },\n      previouslyLoadedRequest: () => false,\n      time: 1640995200200,\n    } as unknown as UnagiRequest\n    collectQueryTimings(request, QUERY_1, 'requested')\n    collectQueryTimings(request, QUERY_1, 'resolved', 100)\n    collectQueryTimings(request, QUERY_1, 'resolved', 120)\n    collectQueryTimings(request, QUERY_1, 'rendered')\n\n    logQueryTimings('ssr', request)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(`\n      \"\u250C\u2500\u2500 Query timings for http://localhost:3000/\n      \u2502 -200.00ms  Requested  test1\n      \u2502 -200.00ms  Resolved   test1 (Took 100.00ms)\n      \u2502 -200.00ms  Resolved   test1 (Took 120.00ms)\n      \u2502 -200.00ms  Rendered   test1\n      \u2502 Multiple data loads detected: test1\n      \u2514\u2500\u2500\"\n    `)\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
