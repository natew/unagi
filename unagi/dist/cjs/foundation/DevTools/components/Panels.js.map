{
  "version": 3,
  "sources": ["../../../../../src/foundation/DevTools/components/Panels.tsx"],
  "sourcesContent": ["import React, { ComponentProps, useEffect, useState } from 'react'\n\n// import { ClientAnalytics } from '../../Analytics/index.js'\nimport { Performance } from './Performance.client.js'\n\nexport interface Props {\n  performance: ComponentProps<typeof Performance>\n}\n\ninterface BasePanel {\n  content: string\n}\n\ninterface ExternalPanel extends BasePanel {\n  url: string\n}\n\ninterface ComponentPanel extends BasePanel {\n  component: React.ReactNode\n}\n\ntype Navigations = Props['performance']['navigations']\n\ninterface Panels {\n  performance: ComponentPanel\n  graphiql: ExternalPanel\n}\n\nconst isComponentPanel = (panel: ComponentPanel | ExternalPanel): panel is ComponentPanel =>\n  (panel as ComponentPanel).component !== undefined\n\nexport function Panels({}: Props) {\n  const [selectedPanel, setSelectedPanel] = useState<number>(0)\n  const [navigations, setNavigations] = useState<Navigations>([])\n\n  // useEffect(() => {\n  //   ClientAnalytics.subscribe(\n  //     ClientAnalytics.eventNames.PERFORMANCE,\n  //     ({\n  //       response_start,\n  //       navigation_start,\n  //       first_contentful_paint,\n  //       largest_contentful_paint,\n  //       response_end,\n  //       page_load_type,\n  //       url,\n  //       transfer_size,\n  //     }) => {\n  //       setNavigations([\n  //         ...navigations,\n  //         {\n  //           ttfb: response_start - navigation_start,\n  //           fcp: first_contentful_paint,\n  //           lcp: largest_contentful_paint,\n  //           duration: response_end - navigation_start,\n  //           type: `${page_load_type} load`,\n  //           size: transfer_size,\n  //           url,\n  //         },\n  //       ])\n  //     }\n  //   )\n  // }, [setNavigations, navigations])\n\n  const panels = getPanels({ performance: { navigations } })\n  const panelComponents = panels.map((obj, index) =>\n    isComponentPanel(obj) ? (\n      <div key={obj.content} style={{ display: selectedPanel === index ? 'block' : 'none' }}>\n        {obj.component}\n      </div>\n    ) : null\n  )\n\n  return (\n    <div style={{ display: 'flex', height: '100%' }}>\n      <div style={{ borderRight: '1px solid', padding: '1em 0em' }}>\n        {panels.map((panel, index) => {\n          const active = selectedPanel === index\n          const style = {\n            padding: '0em 1.25em',\n            fontWeight: 'bold',\n            textDecoration: active ? 'underline' : 'none',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }\n          if (isComponentPanel(panel)) {\n            return (\n              <button\n                key={panel.id}\n                type=\"button\"\n                style={style}\n                onClick={() => setSelectedPanel(index)}\n              >\n                <span>{panel.content}</span>\n              </button>\n            )\n          }\n          return (\n            <a style={style} target=\"_blank\" rel=\"noreferrer\" href={panel.url} key={panel.url}>\n              {panel.content}\n              <span>\u2197</span>\n            </a>\n          )\n        })}\n      </div>\n      <div style={{ padding: '1em', width: '100%' }}>\n        {panelComponents[selectedPanel ? selectedPanel : 0]}\n      </div>\n    </div>\n  )\n}\n\nfunction getPanels({ performance }: Props) {\n  const panels: Panels = {\n    performance: {\n      content: 'Performance',\n      component: <Performance {...performance} />,\n    },\n    graphiql: {\n      content: 'GraphiQL',\n      url: '/___graphql',\n    },\n  }\n\n  return Object.keys(panels).map((key) => {\n    return { ...panels[key as keyof Panels], id: key }\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA2D;AAG3D,gCAA4B;AAyB5B,MAAM,mBAAmB,CAAC,UACvB,MAAyB,cAAc;AAEnC,gBAAgB,IAAW;AAChC,QAAM,CAAC,eAAe,oBAAoB,2BAAiB,CAAC;AAC5D,QAAM,CAAC,aAAa,kBAAkB,2BAAsB,CAAC,CAAC;AA+B9D,QAAM,SAAS,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC;AACzD,QAAM,kBAAkB,OAAO,IAAI,CAAC,KAAK,UACvC,iBAAiB,GAAG,IAClB,mDAAC;AAAA,IAAI,KAAK,IAAI;AAAA,IAAS,OAAO,EAAE,SAAS,kBAAkB,QAAQ,UAAU,OAAO;AAAA,KACjF,IAAI,SACP,IACE,IACN;AAEA,SACE,mDAAC;AAAA,IAAI,OAAO,EAAE,SAAS,QAAQ,QAAQ,OAAO;AAAA,KAC5C,mDAAC;AAAA,IAAI,OAAO,EAAE,aAAa,aAAa,SAAS,UAAU;AAAA,KACxD,OAAO,IAAI,CAAC,OAAO,UAAU;AAC5B,UAAM,SAAS,kBAAkB;AACjC,UAAM,QAAQ;AAAA,MACZ,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,gBAAgB,SAAS,cAAc;AAAA,MACvC,SAAS;AAAA,MACT,gBAAgB;AAAA,MAChB,YAAY;AAAA,IACd;AACA,QAAI,iBAAiB,KAAK,GAAG;AAC3B,aACE,mDAAC;AAAA,QACC,KAAK,MAAM;AAAA,QACX,MAAK;AAAA,QACL;AAAA,QACA,SAAS,MAAM,iBAAiB,KAAK;AAAA,SAErC,mDAAC,cAAM,MAAM,OAAQ,CACvB;AAAA,IAEJ;AACA,WACE,mDAAC;AAAA,MAAE;AAAA,MAAc,QAAO;AAAA,MAAS,KAAI;AAAA,MAAa,MAAM,MAAM;AAAA,MAAK,KAAK,MAAM;AAAA,OAC3E,MAAM,SACP,mDAAC,cAAK,QAAC,CACT;AAAA,EAEJ,CAAC,CACH,GACA,mDAAC;AAAA,IAAI,OAAO,EAAE,SAAS,OAAO,OAAO,OAAO;AAAA,KACzC,gBAAgB,gBAAgB,gBAAgB,EACnD,CACF;AAEJ;AAEA,mBAAmB,EAAE,eAAsB;AACzC,QAAM,SAAiB;AAAA,IACrB,aAAa;AAAA,MACX,SAAS;AAAA,MACT,WAAW,mDAAC;AAAA,QAAa,GAAG;AAAA,OAAa;AAAA,IAC3C;AAAA,IACA,UAAU;AAAA,MACR,SAAS;AAAA,MACT,KAAK;AAAA,IACP;AAAA,EACF;AAEA,SAAO,OAAO,KAAK,MAAM,EAAE,IAAI,CAAC,QAAQ;AACtC,WAAO,EAAE,GAAG,OAAO,MAAsB,IAAI,IAAI;AAAA,EACnD,CAAC;AACH;",
  "names": []
}
