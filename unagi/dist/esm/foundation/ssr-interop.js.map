{
  "version": 3,
  "sources": ["../../../src/foundation/ssr-interop.ts"],
  "sourcesContent": ["/**\n * This file is used for compatibility between browser and server environments.\n * The browser loads this file as is, without leaking server logic.\n * In the server, this file is transformed by Vite to inject server logic.\n * NOTE: Do not remove SSR-prefixed comments in this file.\n */\n\nimport { Context, useContext } from 'react'\n\nimport type { UnagiRequest } from './UnagiRequest/UnagiRequest.server.js'\n\n//@SSR import {useServerRequest} from './ServerRequestProvider/index.js';\n\n// This is replaced by Vite to import.meta.env.SSR\nexport const META_ENV_SSR = false\n\ntype ServerGetter<T> = (request: UnagiRequest) => T\n\nconst reactContextType = Symbol.for('react.context')\n\n/**\n * Isomorphic hook to access context data. It gives access to the current request\n * when running on the server, and returns the provided client fallback in the browser.\n * This can be used in server components (RSC) as a Context/Provider replacement. In client\n * components, it uses the server getter in SSR and the client fallback in the browser.\n * @param serverGetter - A function that gets the current server request and returns any\n * desired request property. It only runs in the server (both in RSC and SSR).\n * @param clientFallback - An optional raw value or a React.Context to be consumed that will be\n * returned if the current environment is not the server. Note that, if this is a React.Context,\n * there must be a React.Provider parent in the app tree.\n * @returns A value retrieved from the current server request or a fallback value in the client.\n * The returned type depends on what the server getter returns.\n * @example\n * ```js\n * import {MyClientContext} from './my-client-react-context-provider.js';\n * useEnvContext(req => req.ctx.myServerContext, MyClientContext)\n * ```\n */\nexport function useEnvContext<T>(serverGetter: ServerGetter<T>, clientFallback?: any) {\n  //@SSR if (META_ENV_SSR) return serverGetter(useServerRequest());\n\n  return clientFallback && clientFallback.$$typeof === reactContextType\n    ? useContext(clientFallback as Context<T>) // eslint-disable-line react-hooks/rules-of-hooks\n    : (clientFallback as T)\n}\n"],
  "mappings": "AAOA;AAOO,MAAM,eAAe;AAI5B,MAAM,mBAAmB,OAAO,IAAI,eAAe;AAoB5C,uBAA0B,cAA+B,gBAAsB;AAGpF,SAAO,kBAAkB,eAAe,aAAa,mBACjD,WAAW,cAA4B,IACtC;AACP;",
  "names": []
}
