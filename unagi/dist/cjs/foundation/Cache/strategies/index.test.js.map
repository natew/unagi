{
  "version": 3,
  "sources": ["../../../../../src/foundation/Cache/strategies/index.test.ts"],
  "sourcesContent": ["import {\n  CacheCustom,\n  CacheLong,\n  CacheNone,\n  CacheShort,\n  generateCacheControlHeader,\n} from './index.js'\n\nconst expectedResultMapping: any = {\n  CacheShort: {\n    method: CacheShort,\n    header: 'public, max-age=1, stale-while-revalidate=9',\n  },\n  CacheLong: {\n    method: CacheLong,\n    header: 'public, max-age=3600, stale-while-revalidate=82800',\n  },\n}\n\ndescribe('CachingStrategy', () => {\n  it('should generate the expected cache control header when CacheNone is used', () => {\n    expect(generateCacheControlHeader(CacheNone())).toEqual('no-store')\n  })\n\n  Object.keys(expectedResultMapping).forEach((methodName) => {\n    const testFunction = expectedResultMapping[methodName]\n    it(`should generate the expected cache control header when ${methodName} is used`, () => {\n      expect(generateCacheControlHeader(testFunction.method())).toEqual(testFunction.header)\n    })\n\n    it(`should generate the expected cache control header when ${methodName} override options is used`, () => {\n      expect(\n        generateCacheControlHeader(\n          testFunction.method({\n            mode: 'private',\n            maxAge: 2,\n            staleWhileRevalidate: 18,\n            staleIfError: 18,\n          })\n        )\n      ).toEqual('private, max-age=2, stale-while-revalidate=18, stale-if-error=18')\n    })\n\n    it(`should throw error when ${methodName} override mode with something else other than private or public`, () => {\n      expect(() =>\n        testFunction.method({\n          mode: 'no-store',\n        })\n      ).toThrow(\"'mode' must be either 'public' or 'private'\")\n    })\n  })\n\n  it('should generate the expected cache control header when CacheCustom is used', () => {\n    expect(\n      generateCacheControlHeader(\n        CacheCustom({\n          mode: 'public, must-revalidate',\n          maxAge: 10,\n        })\n      )\n    ).toEqual('public, must-revalidate, max-age=10')\n  })\n})\n"],
  "mappings": ";AAAA,mBAMO;AAEP,MAAM,wBAA6B;AAAA,EACjC,YAAY;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,WAAW;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AACF;AAEA,SAAS,mBAAmB,MAAM;AAChC,KAAG,4EAA4E,MAAM;AACnF,WAAO,6CAA2B,4BAAU,CAAC,CAAC,EAAE,QAAQ,UAAU;AAAA,EACpE,CAAC;AAED,SAAO,KAAK,qBAAqB,EAAE,QAAQ,CAAC,eAAe;AACzD,UAAM,eAAe,sBAAsB;AAC3C,OAAG,0DAA0D,sBAAsB,MAAM;AACvF,aAAO,6CAA2B,aAAa,OAAO,CAAC,CAAC,EAAE,QAAQ,aAAa,MAAM;AAAA,IACvF,CAAC;AAED,OAAG,0DAA0D,uCAAuC,MAAM;AACxG,aACE,6CACE,aAAa,OAAO;AAAA,QAClB,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,cAAc;AAAA,MAChB,CAAC,CACH,CACF,EAAE,QAAQ,kEAAkE;AAAA,IAC9E,CAAC;AAED,OAAG,2BAA2B,6EAA6E,MAAM;AAC/G,aAAO,MACL,aAAa,OAAO;AAAA,QAClB,MAAM;AAAA,MACR,CAAC,CACH,EAAE,QAAQ,6CAA6C;AAAA,IACzD,CAAC;AAAA,EACH,CAAC;AAED,KAAG,8EAA8E,MAAM;AACrF,WACE,6CACE,8BAAY;AAAA,MACV,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC,CACH,CACF,EAAE,QAAQ,qCAAqC;AAAA,EACjD,CAAC;AACH,CAAC;",
  "names": []
}
