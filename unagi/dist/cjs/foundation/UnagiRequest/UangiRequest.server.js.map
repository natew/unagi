{
  "version": 3,
  "sources": ["../../../../src/foundation/UnagiRequest/UangiRequest.server.ts"],
  "sourcesContent": ["import { HelmetData as HeadData } from 'react-helmet-async'\n\nimport { RSC_PATHNAME } from '../../constants.js'\nimport type {\n  PreloadOptions,\n  QueryKey,\n  ResolvedHydrogenConfig,\n  RuntimeContext,\n} from '../../types.js'\nimport { hashKey } from '../../utilities/hash.js'\nimport type { QueryCacheControlHeaders } from '../../utilities/log/log-cache-header.js'\nimport type { QueryTiming } from '../../utilities/log/log-query-timeline.js'\nimport { parseJSON } from '../../utilities/parse.js'\nimport { getTime } from '../../utilities/timing.js'\nimport type { SessionSyncApi } from '../session/session-types.js'\n\nexport type PreloadQueryEntry = {\n  key: QueryKey\n  fetcher: (request: HydrogenRequest) => Promise<unknown>\n  preload?: PreloadOptions\n}\nexport type PreloadQueriesByURL = Map<string, PreloadQueryEntry>\nexport type AllPreloadQueries = Map<string, PreloadQueriesByURL>\nexport type RouterContextData = {\n  routeRendered: boolean\n  serverProps: Record<string, any>\n  routeParams: Record<string, string>\n}\n\nlet reqCounter = 0 // For debugging\nconst generateId =\n  typeof crypto !== 'undefined' &&\n  // @ts-ignore\n  !!crypto.randomUUID\n    ? // @ts-ignore\n      () => crypto.randomUUID() as string\n    : () => `req${++reqCounter}`\n\n// Stores queries by url or '*'\nconst preloadCache: AllPreloadQueries = new Map()\nconst previouslyLoadedUrls: Record<string, number> = {}\nconst PRELOAD_ALL = '*'\n\n/**\n * This augments the `Request` object from the Fetch API:\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Request\n *\n * - Adds a `cookies` map for easy access\n * - Adds a static constructor to convert a Node.js `IncomingMessage` to a Request.\n */\nexport class HydrogenRequest extends Request {\n  /**\n   * A Map of cookies for easy access.\n   */\n  public cookies: Map<string, string>\n  public id: string\n  public time: number\n\n  /**\n   * Get the canonical URL for the current page, across SSR and RSC requests.\n   */\n  public normalizedUrl: string\n\n  // CFW Request has a reserved 'context' property, use 'ctx' instead.\n  public ctx: {\n    cache: Map<string, any>\n    head: HeadData\n    hydrogenConfig?: ResolvedHydrogenConfig\n    queryCacheControl: Array<QueryCacheControlHeaders>\n    queryTimings: Array<QueryTiming>\n    preloadQueries: PreloadQueriesByURL\n    analyticsData: any\n    router: RouterContextData\n    buyerIpHeader?: string\n    session?: SessionSyncApi\n    runtime?: RuntimeContext\n    scopes: Map<string, Record<string, any>>\n    localization?: LocalizationContextValue\n    [key: string]: any\n  }\n\n  constructor(input: any)\n  constructor(input: RequestInfo, init?: RequestInit)\n  constructor(input: RequestInfo | any, init?: RequestInit) {\n    if (input instanceof Request) {\n      super(input, init)\n    } else {\n      super(getUrlFromNodeRequest(input), getInitFromNodeRequest(input))\n    }\n\n    this.time = getTime()\n    this.id = generateId()\n    this.normalizedUrl = decodeURIComponent(this.isRscRequest() ? normalizeUrl(this.url) : this.url)\n\n    this.ctx = {\n      cache: new Map(),\n      head: new HeadData({}),\n      router: {\n        routeRendered: false,\n        serverProps: {},\n        routeParams: {},\n      },\n      queryCacheControl: [],\n      queryTimings: [],\n      analyticsData: {\n        url: this.url,\n        normalizedRscUrl: this.normalizedUrl,\n      },\n      preloadQueries: new Map(),\n      scopes: new Map(),\n    }\n    this.cookies = this.parseCookies()\n  }\n\n  public previouslyLoadedRequest() {\n    if (previouslyLoadedUrls[this.normalizedUrl] > 1) return true\n    previouslyLoadedUrls[this.normalizedUrl] = previouslyLoadedUrls[this.normalizedUrl] ? 2 : 1\n    return false\n  }\n\n  private parseCookies() {\n    const cookieString = this.headers.get('cookie') || ''\n\n    return new Map(\n      cookieString\n        .split(';')\n        .map((chunk) => chunk.trim())\n        .filter((chunk) => chunk !== '')\n        .map((chunk) => chunk.split(/=(.+)/) as [string, string])\n    )\n  }\n\n  public isRscRequest() {\n    const url = new URL(this.url)\n    return url.pathname === RSC_PATHNAME\n  }\n\n  public savePreloadQuery(query: PreloadQueryEntry) {\n    if (query.preload === PRELOAD_ALL) {\n      saveToPreloadAllPreload(query)\n    } else {\n      this.ctx.preloadQueries.set(hashKey(query.key), query)\n    }\n  }\n\n  public getPreloadQueries(): PreloadQueriesByURL | undefined {\n    if (preloadCache.has(this.normalizedUrl)) {\n      const combinedPreloadQueries: PreloadQueriesByURL = new Map()\n      const urlPreloadCache = preloadCache.get(this.normalizedUrl)\n\n      mergeMapEntries(combinedPreloadQueries, urlPreloadCache)\n      mergeMapEntries(combinedPreloadQueries, preloadCache.get(PRELOAD_ALL))\n\n      return combinedPreloadQueries\n    } else if (preloadCache.has(PRELOAD_ALL)) {\n      return preloadCache.get(PRELOAD_ALL)\n    }\n  }\n\n  public savePreloadQueries() {\n    preloadCache.set(this.normalizedUrl, this.ctx.preloadQueries)\n  }\n\n  /**\n   * Buyer IP varies by hosting provider and runtime. The developer should provide this\n   * as an argument to the `handleRequest` function for their runtime.\n   * Defaults to `x-forwarded-for` header value.\n   */\n  public getBuyerIp() {\n    return this.headers.get(this.ctx.buyerIpHeader ?? 'x-forwarded-for')\n  }\n\n  /**\n   * Build a `cacheKey` in the form of a `Request` to be used in full-page\n   * caching.\n   * - lockKey generates a placeholder cache key\n   */\n  public cacheKey(lockKey = false): Request {\n    const url = new URL(this.url)\n\n    if (lockKey) {\n      url.searchParams.set('cache-lock', 'true')\n    }\n\n    return new Request(url.href, this)\n  }\n\n  public async formData(): Promise<FormData> {\n    // @ts-ignore\n    if (__HYDROGEN_WORKER__ || super.formData) return super.formData()\n\n    const contentType = this.headers.get('Content-Type') || ''\n\n    // If mimeType\u2019s essence is \"multipart/form-data\", then:\n    if (/multipart\\/form-data/.test(contentType)) {\n      throw new Error('multipart/form-data not supported')\n    } else if (/application\\/x-www-form-urlencoded/.test(contentType)) {\n      // Otherwise, if mimeType\u2019s essence is \"application/x-www-form-urlencoded\", then:\n\n      // 1. Let entries be the result of parsing bytes.\n      let entries\n      try {\n        entries = new URLSearchParams(await this.text())\n      } catch (err: any) {\n        // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.\n        // 2. If entries is failure, then throw a TypeError.\n        throw new TypeError(undefined, { cause: err as Error })\n      }\n\n      // 3. Return a new FormData object whose entries are entries.\n      const formData = new FormData()\n      for (const [name, value] of entries) {\n        formData.append(name, value)\n      }\n      return formData as FormData\n    } else {\n      // Otherwise, throw a TypeError.\n      throw new TypeError()\n    }\n  }\n}\n\nfunction mergeMapEntries(map1: PreloadQueriesByURL, map2: PreloadQueriesByURL | undefined) {\n  map2 && map2.forEach((v, k) => map1.set(k, v))\n}\n\nfunction saveToPreloadAllPreload(query: PreloadQueryEntry) {\n  let setCache = preloadCache.get(PRELOAD_ALL)\n  if (!setCache) {\n    setCache = new Map()\n  }\n  setCache?.set(hashKey(query.key), query)\n  preloadCache.set(PRELOAD_ALL, setCache)\n}\n\n/**\n * @see https://github.com/frandiox/vitedge/blob/17f3cd943e86d7c0c71a862985ddd6caa2899425/src/node/utils.js#L19-L24\n *\n * Note: Request can sometimes be an instance of Express request, where `originalUrl` is the true source of what the\n * URL pathname is. We want to use that if it's present, so we union type this to `any`.\n */\nfunction getUrlFromNodeRequest(request: any) {\n  const url: string = request.originalUrl ?? request.url\n  if (url && !url.startsWith('/')) return url\n\n  // TODO: Find out how to determine https from `request` object without forwarded proto\n  const secure = request.headers['x-forwarded-proto'] === 'https'\n\n  return new URL(`${secure ? 'https' : 'http'}://${request.headers.host! + url}`).toString()\n}\n\nfunction getInitFromNodeRequest(request: any) {\n  const init = {\n    headers: new Headers(request.headers as { [key: string]: string }),\n    method: request.method,\n    body: request.method !== 'GET' && request.method !== 'HEAD' ? request.body : undefined,\n  }\n\n  const remoteAddress = request.socket.remoteAddress\n  if (!init.headers.has('x-forwarded-for') && remoteAddress) {\n    init.headers.set('x-forwarded-for', remoteAddress)\n  }\n\n  return init\n}\n\nfunction normalizeUrl(rawUrl: string) {\n  const url = new URL(rawUrl)\n  const state = parseJSON(url.searchParams.get('state') ?? '')\n  const normalizedUrl = new URL(state?.pathname ?? '', url.origin)\n  normalizedUrl.search = state?.search\n\n  return normalizedUrl.toString()\n}\n"],
  "mappings": "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",
  "names": []
}
