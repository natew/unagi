{
  "version": 3,
  "sources": ["../../../../../src/utilities/log/__tests__/log-cache-header.vitest.ts"],
  "sourcesContent": ["import { stripColors } from 'kolorist'\nimport { Mocked, vi } from 'vitest'\n\nimport { UnagiRequest } from '../../../foundation/UnagiRequest/UnagiRequest.server.js'\nimport { UnagiResponse } from '../../../foundation/UnagiResponse/UnagiResponse.server.js'\nimport { Logger, setLogger } from '../index.js'\nimport { collectQueryCacheControlHeaders, logCacheControlHeaders } from '../log-cache-header.js'\n\nlet mockedLogger: Mocked<Logger>\n\nconst QUERY_1 = 'test1'\nconst QUERY_2 = 'testing2'\nconst QUERY_3 = 'testable3'\n\ndescribe('cache header log', () => {\n  beforeEach(() => {\n    mockedLogger = {\n      trace: vi.fn(),\n      debug: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n      fatal: vi.fn(),\n      options: vi.fn(() => ({})),\n    }\n\n    setLogger({ ...mockedLogger, showCacheControlHeader: true })\n  })\n\n  afterEach(() => {\n    setLogger(undefined)\n  })\n\n  it('should log cache control header for main request', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryCacheControl: [],\n      },\n    } as unknown as UnagiRequest\n    const response = {\n      cacheControlHeader: 'public, max-age=1, stale-while-revalidate=9',\n    } as UnagiResponse\n\n    logCacheControlHeaders('str', request, response)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"\u250C\u2500\u2500 Cache control header for http://localhost:3000/\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[1][1])).toMatchInlineSnapshot(\n      '\"\u2502 public, max-age=1, stale-while-revalidate=9\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[2][1])).toMatchInlineSnapshot('\"\u2514\u2500\u2500\"')\n  })\n\n  it('should log cache control header for sub request', () => {\n    const request = {\n      url: 'http://localhost:3000/react?state=%7B%22pathname%22%3A%22%2F%22%2C%22search%22%3A%22%22%7D',\n      ctx: {\n        queryCacheControl: [],\n      },\n    } as unknown as UnagiRequest\n    const response = {\n      cacheControlHeader: 'public, max-age=1, stale-while-revalidate=9',\n    } as UnagiResponse\n\n    logCacheControlHeaders('rsc', request, response)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"\u250C\u2500\u2500 Cache control header for {\\\\\"pathname\\\\\":\\\\\"/\\\\\",\\\\\"search\\\\\":\\\\\"\\\\\"}\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[1][1])).toMatchInlineSnapshot(\n      '\"\u2502 public, max-age=1, stale-while-revalidate=9\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[2][1])).toMatchInlineSnapshot('\"\u2514\u2500\u2500\"')\n  })\n\n  it('should log cache control header for main request and sub query request', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryCacheControl: [],\n      },\n    } as unknown as UnagiRequest\n    const response = {\n      cacheControlHeader: 'public, max-age=1, stale-while-revalidate=9',\n    } as UnagiResponse\n\n    collectQueryCacheControlHeaders(request, QUERY_1, 'public, max-age=1, stale-while-revalidate=9')\n    logCacheControlHeaders('str', request, response)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"\u250C\u2500\u2500 Cache control header for http://localhost:3000/\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[1][1])).toMatchInlineSnapshot(\n      '\"\u2502 public, max-age=1, stale-while-revalidate=9\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[2][1])).toMatchInlineSnapshot('\"\u2502\"')\n    expect(stripColors(mockedLogger.debug.mock.calls[3][1])).toMatchInlineSnapshot(\n      '\"\u2502 query test1 public, max-age=1, stale-while-revalidate=9\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[4][1])).toMatchInlineSnapshot('\"\u2514\u2500\u2500\"')\n  })\n\n  it('should log cache control header for main request and several sub query requests', () => {\n    const request = {\n      url: 'http://localhost:3000/',\n      ctx: {\n        queryCacheControl: [],\n      },\n    } as unknown as UnagiRequest\n    const response = {\n      cacheControlHeader: 'public, max-age=1, stale-while-revalidate=9',\n    } as UnagiResponse\n\n    collectQueryCacheControlHeaders(request, QUERY_1, 'public, max-age=1, stale-while-revalidate=9')\n    collectQueryCacheControlHeaders(\n      request,\n      QUERY_2,\n      'public, max-age=2, stale-while-revalidate=10'\n    )\n    collectQueryCacheControlHeaders(\n      request,\n      QUERY_3,\n      'public, max-age=3, stale-while-revalidate=11'\n    )\n    logCacheControlHeaders('str', request, response)\n\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"\u250C\u2500\u2500 Cache control header for http://localhost:3000/\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[1][1])).toMatchInlineSnapshot(\n      '\"\u2502 public, max-age=1, stale-while-revalidate=9\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[2][1])).toMatchInlineSnapshot('\"\u2502\"')\n    expect(stripColors(mockedLogger.debug.mock.calls[3][1])).toMatchInlineSnapshot(\n      '\"\u2502 query test1     public, max-age=1, stale-while-revalidate=9\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[4][1])).toMatchInlineSnapshot(\n      '\"\u2502 query testing2  public, max-age=2, stale-while-revalidate=10\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[5][1])).toMatchInlineSnapshot(\n      '\"\u2502 query testable3 public, max-age=3, stale-while-revalidate=11\"'\n    )\n    expect(stripColors(mockedLogger.debug.mock.calls[6][1])).toMatchInlineSnapshot('\"\u2514\u2500\u2500\"')\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
