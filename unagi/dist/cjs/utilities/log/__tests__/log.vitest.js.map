{
  "version": 3,
  "sources": ["../../../../../src/utilities/log/__tests__/log.vitest.ts"],
  "sourcesContent": ["import { stripColors } from 'kolorist'\nimport { Mocked, vi } from 'vitest'\n\nimport { UnagiRequest } from '../../../foundation/UnagiRequest/UnagiRequest.server.js'\nimport { Logger, getLoggerWithContext, log, logServerResponse, setLogger } from '../index.js'\n\nlet mockedLogger: Mocked<Logger>\n\ndescribe('log', () => {\n  beforeEach(() => {\n    mockedLogger = {\n      trace: vi.fn(),\n      debug: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n      fatal: vi.fn(),\n      options: vi.fn(() => ({})),\n    }\n\n    vi.spyOn(Date, 'now').mockImplementation(() => 2100)\n    vi.spyOn(performance, 'now').mockImplementation(() => 2100)\n\n    setLogger(mockedLogger)\n  })\n\n  afterEach(() => {\n    setLogger(undefined)\n  })\n\n  it('should return the wrapped mockLogger instance when log is called', () => {\n    log.debug('test')\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(log.options()).toEqual({})\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual({})\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toEqual('test')\n  })\n\n  it('should return the mockLogger2 instance when setLogger is called', () => {\n    const mockLogger2: Mocked<Logger> = {\n      trace: vi.fn(),\n      debug: vi.fn(),\n      warn: vi.fn(),\n      error: vi.fn(),\n      fatal: vi.fn(),\n      options: vi.fn(() => ({})),\n    }\n\n    setLogger({ ...mockLogger2, showCacheControlHeader: true })\n\n    log.debug('test')\n    expect(mockLogger2.debug).toHaveBeenCalled()\n    expect(log.options()).toEqual({\n      showCacheControlHeader: true,\n    })\n    expect(mockLogger2.debug.mock.calls[0][0]).toEqual({})\n    expect(mockLogger2.debug.mock.calls[0][1]).toEqual('test')\n  })\n\n  it('should set showCacheControlHeader option correctly', () => {\n    setLogger({ showCacheControlHeader: true })\n    expect(log.options()).toEqual({\n      showCacheControlHeader: true,\n    })\n  })\n\n  it('should set showCacheApiStatus option correctly', () => {\n    setLogger({\n      showCacheApiStatus: true,\n    })\n    expect(log.options()).toEqual({\n      showCacheApiStatus: true,\n    })\n  })\n\n  it('should set multiple options correctly', () => {\n    setLogger({\n      showCacheControlHeader: true,\n    })\n    expect(log.options()).toEqual({\n      showCacheControlHeader: true,\n    })\n    setLogger({\n      showCacheApiStatus: true,\n      showCacheControlHeader: true,\n    })\n    expect(log.options()).toEqual({\n      showCacheApiStatus: true,\n      showCacheControlHeader: true,\n    })\n  })\n\n  it('should log 500 server response', () => {\n    const request = {\n      method: 'GET',\n      url: 'http://localhost:3000/',\n      time: 1000,\n    } as UnagiRequest\n    logServerResponse('str', request, 500)\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"GET streaming SSR     500 1100.00 ms http://localhost:3000/\"'\n    )\n  })\n\n  it('should log 200 server response', () => {\n    const request = {\n      method: 'GET',\n      url: 'http://localhost:3000/',\n      time: 1000,\n    } as UnagiRequest\n    logServerResponse('str', request, 200)\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"GET streaming SSR     200 1100.00 ms http://localhost:3000/\"'\n    )\n  })\n\n  it('should log 300 server response', () => {\n    const request = {\n      method: 'GET',\n      url: 'http://localhost:3000/',\n      time: 1000,\n    } as UnagiRequest\n    logServerResponse('str', request, 301)\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"GET streaming SSR     301 1100.00 ms http://localhost:3000/\"'\n    )\n  })\n\n  it('should log 400 server response', () => {\n    const request = {\n      method: 'GET',\n      url: 'http://localhost:3000/',\n      time: 1000,\n    } as UnagiRequest\n    logServerResponse('str', request, 404)\n    expect(mockedLogger.debug).toHaveBeenCalled()\n    expect(mockedLogger.debug.mock.calls[0][0]).toEqual(request)\n    expect(stripColors(mockedLogger.debug.mock.calls[0][1])).toMatchInlineSnapshot(\n      '\"GET streaming SSR     404 1100.00 ms http://localhost:3000/\"'\n    )\n  })\n  ;['trace', 'debug', 'warn', 'error', 'fatal'].forEach((method) => {\n    it(`logs ${method}`, () => {\n      ;(log as any)[method](`unagi: ${method}`)\n      expect((mockedLogger as any)[method]).toHaveBeenCalled()\n      expect(((mockedLogger as any)[method] as any).mock.calls[0][0]).toEqual({})\n      expect(((mockedLogger as any)[method] as any).mock.calls[0][1]).toBe(`unagi: ${method}`)\n    })\n\n    it('gets logger for a given context', () => {\n      const clog = getLoggerWithContext({ url: 'example.com' })\n\n      ;(clog as any)[method](`unagi: ${method}`)\n      expect((mockedLogger as any)[method]).toHaveBeenCalled()\n      expect(((mockedLogger as any)[method] as any).mock.calls[0][0]).toEqual({\n        url: 'example.com',\n      })\n      expect(((mockedLogger as any)[method] as any).mock.calls[0][1]).toBe(`unagi: ${method}`)\n    })\n\n    it('marks async calls for waitUntil', () => {\n      const waitUntilPromises = [] as Array<Promise<any>>\n\n      const clog = getLoggerWithContext({\n        ctx: {\n          runtime: { waitUntil: (p: Promise<any>) => waitUntilPromises.push(p) },\n        } as unknown as UnagiRequest['ctx'],\n      })\n\n      ;(clog as any)[method]('no promise 1')\n      ;(clog as any)[method]('no promise 2')\n      expect(waitUntilPromises).toHaveLength(0)\n\n      setLogger({ [method]: async () => null })\n      ;(clog as any)[method]('promise 1')\n      ;(clog as any)[method]('promise 2')\n      expect(waitUntilPromises).toHaveLength(2)\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
