{
  "version": 3,
  "sources": ["../../../../src/utilities/log/log.ts"],
  "sourcesContent": ["import { green, italic, lightBlue, red, yellow } from 'kolorist'\n\nimport { UnagiRequest } from '../../foundation/UnagiRequest/UnagiRequest.server.js'\nimport { getTime } from '../timing.js'\nimport { parseUrl } from './utils.js'\n\n/** The `log` utility is a function that's used for logging debugging, warning, and error information about the application.\n * Use this utility by importing `log` from `@tamagui/unagi`, or by using a `log` prop passed to each page\n * component. We recommend using the `log` prop passed to each page because it will associated your log to the\n * current request in progress.\n */\n\ntype LoggerMethod = (...args: Array<any>) => void | Promise<any>\nexport interface Logger {\n  trace: LoggerMethod\n  debug: LoggerMethod\n  warn: LoggerMethod\n  error: LoggerMethod\n  fatal: LoggerMethod\n  options: () => LoggerOptions\n}\n\nexport type LoggerOptions = {\n  showCacheControlHeader?: boolean\n  showCacheApiStatus?: boolean\n  showQueryTiming?: boolean\n  showUnusedQueryProperties?: boolean\n}\n\nexport type LoggerConfig = Partial<Exclude<Logger, 'options'>> & LoggerOptions\n\nexport type RenderType = 'str' | 'rsc' | 'ssr' | 'api'\n\nconst defaultLogger: Logger = {\n  trace(context, ...args) {\n    // Re-enable following line to show trace debugging information\n    // console.log(context.id, ...args);\n  },\n  debug(context, ...args) {\n    console.log(...args)\n  },\n  warn(context, ...args) {\n    console.warn(yellow('WARN: '), ...args)\n  },\n  error(context, ...args) {\n    console.error(red('ERROR: '), ...args)\n  },\n  fatal(context, ...args) {\n    console.error(red('FATAL: '), ...args)\n  },\n  options: () => ({} as LoggerOptions),\n}\n\nlet currentLogger = defaultLogger as Logger\n\nfunction doLog(method: keyof typeof defaultLogger, request: Partial<UnagiRequest>, ...args: any[]) {\n  const maybePromise = currentLogger[method](request, ...args)\n  if (maybePromise instanceof Promise) {\n    request?.ctx?.runtime?.waitUntil?.(maybePromise)\n  }\n}\n\nexport function getLoggerWithContext(context: Partial<UnagiRequest>): Logger {\n  return {\n    trace: (...args) => doLog('trace', context, ...args),\n    debug: (...args) => doLog('debug', context, ...args),\n    warn: (...args) => doLog('warn', context, ...args),\n    error: (...args) => doLog('error', context, ...args),\n    fatal: (...args) => doLog('fatal', context, ...args),\n    options: () => currentLogger.options(),\n  }\n}\n\nexport const log: Logger = getLoggerWithContext({})\n\nexport function setLogger(config?: LoggerConfig) {\n  if (!config) {\n    currentLogger = defaultLogger\n    return\n  }\n\n  const options = {} as LoggerOptions\n  currentLogger = { ...defaultLogger, ...config, options: () => options }\n\n  for (const key of Object.keys(config) as (keyof LoggerOptions)[]) {\n    if (!(key in defaultLogger)) {\n      delete currentLogger[key as keyof Logger]\n      options[key] = config[key]\n    }\n  }\n}\n\nconst SERVER_RESPONSE_MAP: Record<string, string> = {\n  str: 'streaming SSR',\n  rsc: 'Server Components',\n  ssr: 'buffered SSR',\n}\n\nexport function logServerResponse(type: RenderType, request: UnagiRequest, responseStatus: number) {\n  const log = getLoggerWithContext(request)\n  const coloredResponseStatus =\n    responseStatus >= 500\n      ? red(responseStatus)\n      : responseStatus >= 400\n      ? yellow(responseStatus)\n      : responseStatus >= 300\n      ? lightBlue(responseStatus)\n      : green(responseStatus)\n\n  const fullType: string = SERVER_RESPONSE_MAP[type] || type\n\n  const styledType = italic(fullType.padEnd(17))\n  const paddedTiming = ((getTime() - request.time).toFixed(2) + ' ms').padEnd(10)\n  const url = parseUrl(type, request.url)\n\n  log.debug(`${request.method} ${styledType} ${coloredResponseStatus} ${paddedTiming} ${url}`)\n}\n"],
  "mappings": "AAAA;AAGA;AACA;AA6BA,MAAM,gBAAwB;AAAA,EAC5B,MAAM,YAAY,MAAM;AAAA,EAGxB;AAAA,EACA,MAAM,YAAY,MAAM;AACtB,YAAQ,IAAI,GAAG,IAAI;AAAA,EACrB;AAAA,EACA,KAAK,YAAY,MAAM;AACrB,YAAQ,KAAK,OAAO,QAAQ,GAAG,GAAG,IAAI;AAAA,EACxC;AAAA,EACA,MAAM,YAAY,MAAM;AACtB,YAAQ,MAAM,IAAI,SAAS,GAAG,GAAG,IAAI;AAAA,EACvC;AAAA,EACA,MAAM,YAAY,MAAM;AACtB,YAAQ,MAAM,IAAI,SAAS,GAAG,GAAG,IAAI;AAAA,EACvC;AAAA,EACA,SAAS,MAAO,EAAC;AACnB;AAEA,IAAI,gBAAgB;AAEpB,eAAe,QAAoC,YAAmC,MAAa;AAvDnG;AAwDE,QAAM,eAAe,cAAc,QAAQ,SAAS,GAAG,IAAI;AAC3D,MAAI,wBAAwB,SAAS;AACnC,yDAAS,QAAT,mBAAc,YAAd,mBAAuB,cAAvB,4BAAmC;AAAA,EACrC;AACF;AAEO,8BAA8B,SAAwC;AAC3E,SAAO;AAAA,IACL,OAAO,IAAI,SAAS,MAAM,SAAS,SAAS,GAAG,IAAI;AAAA,IACnD,OAAO,IAAI,SAAS,MAAM,SAAS,SAAS,GAAG,IAAI;AAAA,IACnD,MAAM,IAAI,SAAS,MAAM,QAAQ,SAAS,GAAG,IAAI;AAAA,IACjD,OAAO,IAAI,SAAS,MAAM,SAAS,SAAS,GAAG,IAAI;AAAA,IACnD,OAAO,IAAI,SAAS,MAAM,SAAS,SAAS,GAAG,IAAI;AAAA,IACnD,SAAS,MAAM,cAAc,QAAQ;AAAA,EACvC;AACF;AAEO,MAAM,MAAc,qBAAqB,CAAC,CAAC;AAE3C,mBAAmB,QAAuB;AAC/C,MAAI,CAAC,QAAQ;AACX,oBAAgB;AAChB;AAAA,EACF;AAEA,QAAM,UAAU,CAAC;AACjB,kBAAgB,EAAE,GAAG,eAAe,GAAG,QAAQ,SAAS,MAAM,QAAQ;AAEtE,aAAW,OAAO,OAAO,KAAK,MAAM,GAA8B;AAChE,QAAI,CAAE,QAAO,gBAAgB;AAC3B,aAAO,cAAc;AACrB,cAAQ,OAAO,OAAO;AAAA,IACxB;AAAA,EACF;AACF;AAEA,MAAM,sBAA8C;AAAA,EAClD,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACP;AAEO,2BAA2B,MAAkB,SAAuB,gBAAwB;AACjG,QAAM,OAAM,qBAAqB,OAAO;AACxC,QAAM,wBACJ,kBAAkB,MACd,IAAI,cAAc,IAClB,kBAAkB,MAClB,OAAO,cAAc,IACrB,kBAAkB,MAClB,UAAU,cAAc,IACxB,MAAM,cAAc;AAE1B,QAAM,WAAmB,oBAAoB,SAAS;AAEtD,QAAM,aAAa,OAAO,SAAS,OAAO,EAAE,CAAC;AAC7C,QAAM,eAAiB,UAAQ,IAAI,QAAQ,MAAM,QAAQ,CAAC,IAAI,OAAO,OAAO,EAAE;AAC9E,QAAM,MAAM,SAAS,MAAM,QAAQ,GAAG;AAEtC,OAAI,MAAM,GAAG,QAAQ,UAAU,cAAc,yBAAyB,gBAAgB,KAAK;AAC7F;",
  "names": []
}
