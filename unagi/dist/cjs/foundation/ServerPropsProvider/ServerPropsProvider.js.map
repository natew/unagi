{
  "version": 3,
  "sources": ["../../../../src/foundation/ServerPropsProvider/ServerPropsProvider.tsx"],
  "sourcesContent": ["import React, {\n  ReactNode,\n  createContext,\n  useCallback,\n  useMemo,\n  useState,\n  useTransition,\n} from 'react'\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __UNAGI_DEV__: boolean\n  // eslint-disable-next-line no-var\n  var __UNAGI_TEST__: boolean\n}\n\nconst PRIVATE_PROPS = ['request', 'response'] as const\n\nexport interface LocationServerProps {\n  pathname: string\n  search: string\n}\n\nexport interface ServerProps {\n  [key: string]: any\n}\n\ntype ServerPropsSetterInput =\n  | ((prev: ServerProps) => Partial<ServerProps>)\n  | Partial<ServerProps>\n  | string\n\nexport interface ServerPropsSetter {\n  (\n    input: ServerPropsSetterInput,\n    propValue?: any // Value when using string input\n  ): void\n}\n\ninterface ProposedServerPropsSetter {\n  (\n    input: ServerPropsSetterInput,\n    propValue?: any // Value when using string input\n  ): LocationServerProps\n}\n\ninterface BaseServerPropsContextValue {\n  pending: boolean\n}\n\nexport interface InternalServerPropsContextValue extends BaseServerPropsContextValue {\n  setLocationServerProps: ServerPropsSetter\n  setServerProps: ServerPropsSetter\n  serverProps: ServerProps\n  locationServerProps: LocationServerProps\n  getProposedLocationServerProps: ProposedServerPropsSetter\n  setRscResponseFromApiRoute: (response: any) => void\n}\n\nexport interface ServerPropsContextValue extends BaseServerPropsContextValue {\n  serverProps: ServerProps\n  setServerProps: ServerPropsSetter\n}\n\nexport const ServerPropsContext = createContext<InternalServerPropsContextValue>(null as any)\n\ninterface ServerPropsProviderProps {\n  initialServerProps: LocationServerProps\n  setServerPropsForRsc: React.Dispatch<React.SetStateAction<LocationServerProps>>\n  setRscResponseFromApiRoute: (response: any) => void\n  children: ReactNode\n}\n\nexport function ServerPropsProvider({\n  initialServerProps,\n  setServerPropsForRsc,\n  setRscResponseFromApiRoute,\n  children,\n}: ServerPropsProviderProps) {\n  const [locationServerProps, setLocationServerProps] =\n    useState<LocationServerProps>(initialServerProps)\n  const [serverProps, setServerProps] = useState<ServerProps>({})\n\n  const [pending, startTransition] = useTransition()\n\n  const setServerPropsCallback = useCallback<ServerPropsSetter>(\n    (input, propValue) => {\n      startTransition(() => {\n        setServerProps((prev) => getNewValue(prev, input, propValue))\n        setServerPropsForRsc((prev) => getNewValue(prev, input, propValue))\n      })\n    },\n    [setServerProps, setServerPropsForRsc]\n  )\n\n  const setLocationServerPropsCallback = useCallback<ServerPropsSetter>(\n    (input) => {\n      // Flush the existing user server state when location changes, leaving only the persisted state\n      startTransition(() => {\n        setServerPropsForRsc(input as LocationServerProps)\n        setServerProps({})\n        setLocationServerProps(input as LocationServerProps)\n      })\n    },\n    [setServerProps, setServerPropsForRsc, setLocationServerProps]\n  )\n\n  const getProposedLocationServerPropsCallback = useCallback<ProposedServerPropsSetter>(\n    (input, propValue) => {\n      return getNewValue(locationServerProps, input, propValue)\n    },\n    [locationServerProps]\n  )\n\n  function getNewValue(prev: any, input: ServerPropsSetterInput, propValue: any) {\n    let newValue: Record<string, any>\n\n    if (typeof input === 'function') {\n      newValue = input(prev)\n    } else if (typeof input === 'string') {\n      newValue = { [input]: propValue }\n    } else {\n      newValue = input\n    }\n\n    if (__UNAGI_DEV__) {\n      const privateProp = PRIVATE_PROPS.find((prop) => prop in newValue)\n      if (privateProp) {\n        console.warn(\n          `Custom \"${privateProp}\" property in server state is ignored. Use a different name.`\n        )\n      }\n    }\n\n    return {\n      ...prev,\n      ...newValue,\n    }\n  }\n\n  const value = useMemo(\n    () => ({\n      pending,\n      locationServerProps,\n      serverProps,\n      setServerProps: setServerPropsCallback,\n      setLocationServerProps: setLocationServerPropsCallback,\n      getProposedLocationServerProps: getProposedLocationServerPropsCallback,\n      setRscResponseFromApiRoute,\n    }),\n    [\n      pending,\n      locationServerProps,\n      serverProps,\n      setServerPropsCallback,\n      setLocationServerPropsCallback,\n      getProposedLocationServerPropsCallback,\n      setRscResponseFromApiRoute,\n    ]\n  )\n\n  return <ServerPropsContext.Provider value={value}>{children}</ServerPropsContext.Provider>\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOO;AASP,MAAM,gBAAgB,CAAC,WAAW,UAAU;AAgDrC,MAAM,qBAAqB,gCAA+C,IAAW;AASrF,6BAA6B;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GAC2B;AAC3B,QAAM,CAAC,qBAAqB,0BAC1B,2BAA8B,kBAAkB;AAClD,QAAM,CAAC,aAAa,kBAAkB,2BAAsB,CAAC,CAAC;AAE9D,QAAM,CAAC,SAAS,mBAAmB,gCAAc;AAEjD,QAAM,yBAAyB,8BAC7B,CAAC,OAAO,cAAc;AACpB,oBAAgB,MAAM;AACpB,qBAAe,CAAC,SAAS,YAAY,MAAM,OAAO,SAAS,CAAC;AAC5D,2BAAqB,CAAC,SAAS,YAAY,MAAM,OAAO,SAAS,CAAC;AAAA,IACpE,CAAC;AAAA,EACH,GACA,CAAC,gBAAgB,oBAAoB,CACvC;AAEA,QAAM,iCAAiC,8BACrC,CAAC,UAAU;AAET,oBAAgB,MAAM;AACpB,2BAAqB,KAA4B;AACjD,qBAAe,CAAC,CAAC;AACjB,6BAAuB,KAA4B;AAAA,IACrD,CAAC;AAAA,EACH,GACA,CAAC,gBAAgB,sBAAsB,sBAAsB,CAC/D;AAEA,QAAM,yCAAyC,8BAC7C,CAAC,OAAO,cAAc;AACpB,WAAO,YAAY,qBAAqB,OAAO,SAAS;AAAA,EAC1D,GACA,CAAC,mBAAmB,CACtB;AAEA,uBAAqB,MAAW,OAA+B,WAAgB;AAC7E,QAAI;AAEJ,QAAI,OAAO,UAAU,YAAY;AAC/B,iBAAW,MAAM,IAAI;AAAA,IACvB,WAAW,OAAO,UAAU,UAAU;AACpC,iBAAW,EAAE,CAAC,QAAQ,UAAU;AAAA,IAClC,OAAO;AACL,iBAAW;AAAA,IACb;AAEA,QAAI,eAAe;AACjB,YAAM,cAAc,cAAc,KAAK,CAAC,SAAS,QAAQ,QAAQ;AACjE,UAAI,aAAa;AACf,gBAAQ,KACN,WAAW,yEACb;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF;AAEA,QAAM,QAAQ,0BACZ,MAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,IACxB,gCAAgC;AAAA,IAChC;AAAA,EACF,IACA;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CACF;AAEA,SAAO,mDAAC,mBAAmB,UAAnB;AAAA,IAA4B;AAAA,KAAe,QAAS;AAC9D;",
  "names": []
}
