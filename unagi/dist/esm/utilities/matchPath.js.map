{
  "version": 3,
  "sources": ["../../../src/utilities/matchPath.ts"],
  "sourcesContent": ["import { Key, TokensToRegexpOptions, pathToRegexp } from 'path-to-regexp'\n\n// Modified from React Router v5\n// https://github.com/remix-run/react-router/blob/v5/packages/react-router/modules/matchPath.js\n\nconst cache: any = {}\nconst cacheLimit = 10000\nlet cacheCount = 0\n\ninterface MatchPathOptions extends TokensToRegexpOptions {\n  path?: string\n  exact?: boolean\n}\n\nfunction compilePath(\n  path: string,\n  options: MatchPathOptions\n): { regexp: RegExp; keys: Array<Key> } {\n  const cacheKey = `${options.end}${options.strict}${options.sensitive}`\n  const pathCache = cache[cacheKey] || (cache[cacheKey] = {})\n\n  if (pathCache[path]) return pathCache[path]\n\n  const keys: Array<Key> = []\n  const regexp = pathToRegexp(path, keys, options)\n  const result = { regexp, keys }\n\n  if (cacheCount < cacheLimit) {\n    pathCache[path] = result\n    cacheCount++\n  }\n\n  return result\n}\n\n/**\n * Public API for matching a URL pathname to a path.\n */\nexport function matchPath(pathname: string, options: MatchPathOptions = {}) {\n  const { path, exact = false, strict = false, sensitive = false } = options\n\n  const paths: Array<any> = [].concat(path as any)\n\n  return paths.reduce((matched, path) => {\n    if (!path && path !== '') return null\n    if (matched) return matched\n\n    const { regexp, keys } = compilePath(path, {\n      end: exact,\n      strict,\n      sensitive,\n    })\n    const match = regexp.exec(pathname)\n\n    if (!match) return null\n\n    const [url, ...values] = match\n    const isExact = pathname === url\n\n    if (exact && !isExact) return null\n\n    return {\n      path, // the path used to match\n      url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL\n      isExact, // whether or not we matched exactly\n      params: keys.reduce((memo: any, key, index) => {\n        memo[key.name] = values[index]\n        return memo\n      }, {}),\n    }\n  }, null)\n}\n"],
  "mappings": "AAAA;AAKA,MAAM,QAAa,CAAC;AACpB,MAAM,aAAa;AACnB,IAAI,aAAa;AAOjB,qBACE,MACA,SACsC;AACtC,QAAM,WAAW,GAAG,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAC3D,QAAM,YAAY,MAAM,aAAc,OAAM,YAAY,CAAC;AAEzD,MAAI,UAAU;AAAO,WAAO,UAAU;AAEtC,QAAM,OAAmB,CAAC;AAC1B,QAAM,SAAS,aAAa,MAAM,MAAM,OAAO;AAC/C,QAAM,SAAS,EAAE,QAAQ,KAAK;AAE9B,MAAI,aAAa,YAAY;AAC3B,cAAU,QAAQ;AAClB;AAAA,EACF;AAEA,SAAO;AACT;AAKO,mBAAmB,UAAkB,UAA4B,CAAC,GAAG;AAC1E,QAAM,EAAE,MAAM,QAAQ,OAAO,SAAS,OAAO,YAAY,UAAU;AAEnE,QAAM,QAAoB,CAAC,EAAE,OAAO,IAAW;AAE/C,SAAO,MAAM,OAAO,CAAC,SAAS,UAAS;AACrC,QAAI,CAAC,SAAQ,UAAS;AAAI,aAAO;AACjC,QAAI;AAAS,aAAO;AAEpB,UAAM,EAAE,QAAQ,SAAS,YAAY,OAAM;AAAA,MACzC,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACF,CAAC;AACD,UAAM,QAAQ,OAAO,KAAK,QAAQ;AAElC,QAAI,CAAC;AAAO,aAAO;AAEnB,UAAM,CAAC,QAAQ,UAAU;AACzB,UAAM,UAAU,aAAa;AAE7B,QAAI,SAAS,CAAC;AAAS,aAAO;AAE9B,WAAO;AAAA,MACL;AAAA,MACA,KAAK,UAAS,OAAO,QAAQ,KAAK,MAAM;AAAA,MACxC;AAAA,MACA,QAAQ,KAAK,OAAO,CAAC,MAAW,KAAK,UAAU;AAC7C,aAAK,IAAI,QAAQ,OAAO;AACxB,eAAO;AAAA,MACT,GAAG,CAAC,CAAC;AAAA,IACP;AAAA,EACF,GAAG,IAAI;AACT;",
  "names": []
}
