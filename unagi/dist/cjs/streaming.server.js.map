{
  "version": 3,
  "sources": ["../../src/streaming.server.ts"],
  "sourcesContent": ["export {\n  renderToPipeableStream as ssrRenderToPipeableStream, // Only available in Node context\n  renderToReadableStream as ssrRenderToReadableStream, // Only available in Browser/Worker context\n} from 'react-dom/server'\n\n// @ts-ignore\nimport { createFromReadableStream as _createFromReadableStream } from '@tamagui/unagi/vendor/react-server-dom-vite'\n// @ts-ignore\nimport { renderToReadableStream as _rscRenderToReadableStream } from '@tamagui/unagi/vendor/react-server-dom-vite/writer.browser.server'\n\n// From Flight flow types\ntype ServerContextJSONValue =\n  | string\n  | boolean\n  | number\n  | null\n  | Readonly<ServerContextJSONValueCircular>\n  | { [key: string]: ServerContextJSONValueCircular }\n\ninterface ServerContextJSONValueCircular extends Array<ServerContextJSONValue> {}\n\nexport const rscRenderToReadableStream = _rscRenderToReadableStream as (\n  App: JSX.Element,\n  options?: {\n    onError?: (error: Error) => void\n    context?: Array<[string, ServerContextJSONValue]>\n    identifierPrefix?: string\n  }\n) => ReadableStream<Uint8Array>\n\nexport const createFromReadableStream = _createFromReadableStream as (\n  rs: ReadableStream<Uint8Array>\n) => {\n  readRoot: () => JSX.Element\n}\n\nexport async function bufferReadableStream(\n  reader: ReadableStreamDefaultReader,\n  cb?: (chunk: string) => void\n) {\n  const decoder = new TextDecoder()\n  let result = ''\n\n  while (true) {\n    const { done, value } = await reader.read()\n    if (done) break\n\n    const stringValue = typeof value === 'string' ? value : decoder.decode(value)\n\n    result += stringValue\n\n    if (cb) {\n      cb(stringValue)\n    }\n  }\n\n  return result\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGO;AAGP,mCAAsE;AAEtE,4BAAqE;AAa9D,MAAM,4BAA4B;AASlC,MAAM,2BAA2B;AAMxC,oCACE,QACA,IACA;AACA,QAAM,UAAU,IAAI,YAAY;AAChC,MAAI,SAAS;AAEb,SAAO,MAAM;AACX,UAAM,EAAE,MAAM,UAAU,MAAM,OAAO,KAAK;AAC1C,QAAI;AAAM;AAEV,UAAM,cAAc,OAAO,UAAU,WAAW,QAAQ,QAAQ,OAAO,KAAK;AAE5E,cAAU;AAEV,QAAI,IAAI;AACN,SAAG,WAAW;AAAA,IAChB;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
