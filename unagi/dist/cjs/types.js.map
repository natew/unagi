{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["export * from './shared-types.js'\n\nimport type { ServerResponse } from 'http'\n\nimport type { SessionStorageAdapter } from './foundation/session/session-types.js'\nimport type { UnagiRequest } from './foundation/UnagiRequest/UnagiRequest.server.js'\nimport type { UnagiResponse } from './foundation/UnagiResponse/UnagiResponse.server.js'\nimport type { Logger, LoggerConfig } from './utilities/log/index.js'\n\nexport type AssembleHtmlParams = {\n  ssrHtml: string\n  rscPayload?: string\n  routes?: ImportGlobEagerOutput\n  request: UnagiRequest\n  template: string\n}\n\nexport type RunSsrParams = {\n  state: Record<string, any>\n  rsc: { readable: ReadableStream; didError: () => Error | undefined }\n  routes?: ImportGlobEagerOutput\n  request: UnagiRequest\n  response: UnagiResponse\n  log: Logger\n  dev?: boolean\n  template: string\n  nonce?: string\n  nodeResponse?: ServerResponse\n  revalidate?: Boolean\n}\n\nexport type RunRscParams = {\n  App: any\n  state: Record<string, any>\n  log: Logger\n  request: UnagiRequest\n  response: UnagiResponse\n}\n\nexport type Hook = (params: { url: URL } & Record<string, any>) => any | Promise<any>\n\nexport type ImportGlobEagerOutput = Record<string, Record<'default' | 'api', any>>\n\nexport type InlineUnagiRoutes =\n  | string\n  | {\n      files: string\n      basePath?: string\n    }\n\nexport type ResolvedUnagiRoutes = {\n  files: ImportGlobEagerOutput\n  dirPrefix: string\n  basePath: string\n}\n\nexport type ServerAnalyticsConnector = {\n  request: (\n    requestUrl: string,\n    requestHeader: Headers,\n    data?: any,\n    contentType?: 'json' | 'text'\n  ) => Promise<any>\n}\n\nexport type InlineUnagiConfig = ClientConfig & {\n  routes?: InlineUnagiRoutes\n  serverAnalyticsConnectors?: Array<ServerAnalyticsConnector>\n  logger?: LoggerConfig\n  session?: (log: Logger) => SessionStorageAdapter\n  poweredByHeader?: boolean\n  serverErrorPage?: string\n  __EXPERIMENTAL__devTools?: boolean\n}\n\nexport type ResolvedUnagiConfig = Omit<InlineUnagiConfig, 'routes'> & {\n  routes: ResolvedUnagiRoutes\n}\n\nexport type ClientConfig = {\n  /** React's StrictMode is on by default for your client side app; if you want to turn it off (not recommended), you can pass `false` */\n  strictMode?: boolean\n}\n\nexport type ClientHandler = (App: React.ElementType, config: ClientConfig) => Promise<void>\n\nexport type QueryKey = string | readonly unknown[]\n\nexport type NoStoreStrategy = {\n  mode: string\n}\n\nexport interface AllCacheOptions {\n  mode?: string\n  maxAge?: number\n  staleWhileRevalidate?: number\n  sMaxAge?: number\n  staleIfError?: number\n}\n\nexport type CachingStrategy = AllCacheOptions\n\nexport type PreloadOptions = boolean | string\n\nexport type UnagiRouteProps = {\n  request: UnagiRequest\n  response: UnagiResponse\n  log: Logger\n  params: Record<string, any>\n  pathname: string\n  search: string\n  [key: string]: any\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;AAAA,0BAAc,8BAAd;",
  "names": []
}
